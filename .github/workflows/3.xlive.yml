name: live update  # 工作流的名称，这里命名为

on:  # 定义触发工作流的事件
  # 定时任务触发已被删除
  push:  # 代码推送触发
    branches:
      - main  # 当推送到 "main" 分支时触发 
    paths:  # 当推送的更改包含以下路径时触发
      - '.github/workflows/3.xlive.yml'  # 包含此工作流文件的更改
      - 'xlive.py'  # 包含任何以 ".py" 结尾的文件的更改
      - 'config.py'  # 包含特定文件的更改
      - 'demo.txt'  # 包含 "some_directory" 目录下任何以 ".txt" 结尾的文件的更改

jobs:  # 定义工作流中的作业
  run_script:  # 作业的名称
    runs-on: ubuntu-latest  # 作业将在最新的 Ubuntu 运行器上执行
    permissions:
      contents: write  # 允许写入仓库

    steps:  # 定义作业中的步骤
    - name: Checkout repository  # 步骤名称：检出仓库
      uses: actions/checkout@v2  # 使用 "actions/checkout" 动作，版本为 "v2"，用于检出代码仓库
      with:
       persist-credentials: true  # 保留 GITHUB_TOKEN 的凭据

    - name: Set up Python  # 步骤名称：设置 Python
      uses: actions/setup-python@v2  # 使用 "actions/setup-python" 动作，版本为 "v2"，用于设置 Python 环境
      with:
        python-version: '3.10'  # 指定 Python 版本为 3.10

    - name: Cache dependencies  # 步骤名称：缓存依赖项
      uses: actions/cache@v3  # 使用 "actions/cache" 动作，版本更新为 "v3"
      with:
        path: ~/.cache/pip  # 指定缓存路径为 pip 的缓存目录
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}  # 缓存键，基于运行器操作系统和 requirements.txt 文件的哈希值
        restore-keys: |  # 备用缓存键，用于在找不到精确匹配时回退
          ${{ runner.os }}-pip-

    - name: Install dependencies  # 步骤名称：安装依赖项
      run: |  # 运行以下 shell 命令
        pip install requests  # 安装 requests 库

    - name: Run Python main script  # 步骤名称：运行 Python 主脚本
      run: python xlive.py  # 运行名为 " 的 Python 脚本

    - name: Fetch and merge latest changes

      run: |

        git fetch origin main

        git merge origin/main

        # 注意：如果合并产生冲突，这里的脚本将失败。您可能需要添加额外的逻辑来处理冲突，

        # 或者确保这个工作流在不太可能产生冲突的情况下运行。
        
    - name: Commit and push if changed  # 步骤名称：如果更改则提交并推送
      run: |  # 运行以下 shell 命令
        git config --local user.email "github-actions[bot]@users.noreply.github.com"  # 设置 git 用户邮箱
        git config --local user.name "github-actions[bot]"  # 设置 git 用户名
        git add -A  # 添加所有更改到暂存区
        if ! git diff --staged --quiet; then  # 如果存在暂存的更改
          git commit -m "Auto-update live files"  # 提交更改，附带消息 "Auto-update live files"
          git push  # 推送更改到远程仓库
        fi  # 结束 if 语句

    env:  # 定义环境变量
      TZ: Asia/Shanghai  # 设置时区为 "Asia/Shanghai"
